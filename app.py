import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from io import BytesIO
from openpyxl import Workbook
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")

# üìÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ CSV-—Ñ–∞–π–ª–∞
@st.cache_data
def get_sample_csv() -> bytes:
    sample_data = pd.DataFrame({
        '–î–∞—Ç–∞': pd.date_range(start='2025-01-01', periods=15, freq='D'),
        '–ü—Ä–æ–¥–∞–∂–∏': [1200, 1500, 1100, 1800, 1600, 1750, 1400, 1550, 1900, 2100, 2050, 1980, 1700, 1650, 1600]
    })
    return sample_data.to_csv(index=False).encode('utf-8')

# üì• –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏
def upload_interface() -> pd.DataFrame:
    with st.expander("üìé –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä CSV-—Ñ–∞–π–ª–∞"):
        st.download_button("–°–∫–∞—á–∞—Ç—å sample_sales_data.csv", data=get_sample_csv(), file_name="sample_sales_data.csv", mime="text/csv")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ '–î–∞—Ç–∞' –∏ '–ü—Ä–æ–¥–∞–∂–∏'", type=["csv"])
    if uploaded_file:
        df = pd.read_csv(uploaded_file, parse_dates=['–î–∞—Ç–∞'])
        df.sort_values('–î–∞—Ç–∞', inplace=True)
        st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        return df
    return pd.DataFrame()

# üìÜ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def filter_by_date(df: pd.DataFrame) -> pd.DataFrame:
    min_date, max_date = df['–î–∞—Ç–∞'].min().date(), df['–î–∞—Ç–∞'].max().date()
    start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", min_value=min_date, max_value=max_date, value=min_date)
    end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", min_value=min_date, max_value=max_date, value=max_date)

    if start_date > end_date:
        st.error("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π")
        return pd.DataFrame()
    
    filtered = df[(df['–î–∞—Ç–∞'] >= pd.to_datetime(start_date)) & (df['–î–∞—Ç–∞'] <= pd.to_datetime(end_date))].copy()
    filtered['–¢–µ–º–ø –ø—Ä–∏—Ä–æ—Å—Ç–∞ (%)'] = filtered['–ü—Ä–æ–¥–∞–∂–∏'].pct_change() * 100
    return filtered

# üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def plot_trend(df: pd.DataFrame):
    st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ —Å —Ç—Ä–µ–Ω–¥–æ–º")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.lineplot(data=df, x='–î–∞—Ç–∞', y='–ü—Ä–æ–¥–∞–∂–∏', marker='o', ax=ax, label='–ü—Ä–æ–¥–∞–∂–∏')
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π –ª–∏–Ω–∏–∏
    z = np.polyfit(df['–î–∞—Ç–∞'].map(datetime.toordinal), df['–ü—Ä–æ–¥–∞–∂–∏'], 1)
    trend = np.poly1d(z)
    ax.plot(df['–î–∞—Ç–∞'], trend(df['–î–∞—Ç–∞'].map(datetime.toordinal)), "r--", label='–¢—Ä–µ–Ω–¥–æ–≤–∞—è –ª–∏–Ω–∏—è')
    ax.legend()
    st.pyplot(fig)

# üìä –ü–æ–∫–∞–∑ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
def show_kpis(df: pd.DataFrame):
    st.subheader("üìå –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{df['–ü—Ä–æ–¥–∞–∂–∏'].sum():,.0f}")
    st.metric("–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏", f"{df['–ü—Ä–æ–¥–∞–∂–∏'].mean():,.2f}")
    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", f"{df['–ü—Ä–æ–¥–∞–∂–∏'].max():,.0f}")
    st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", f"{df['–ü—Ä–æ–¥–∞–∂–∏'].min():,.0f}")

# üíæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á—ë—Ç–∞
def generate_excel(df: pd.DataFrame) -> bytes:
    wb = Workbook()
    ws = wb.active
    ws.title = "–û—Ç—á–µ—Ç"

    ws.append(["KPI", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    ws.append(["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", df['–ü—Ä–æ–¥–∞–∂–∏'].sum()])
    ws.append(["–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏", df['–ü—Ä–æ–¥–∞–∂–∏'].mean()])
    ws.append(["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", df['–ü—Ä–æ–¥–∞–∂–∏'].max()])
    ws.append(["–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", df['–ü—Ä–æ–¥–∞–∂–∏'].min()])
    ws.append([])
    ws.append(["–î–∞—Ç–∞", "–ü—Ä–æ–¥–∞–∂–∏", "–¢–µ–º–ø –ø—Ä–∏—Ä–æ—Å—Ç–∞ (%)"])

    for _, row in df.iterrows():
        ws.append([
            row['–î–∞—Ç–∞'].strftime('%Y-%m-%d'),
            row['–ü—Ä–æ–¥–∞–∂–∏'],
            None if pd.isna(row['–¢–µ–º–ø –ø—Ä–∏—Ä–æ—Å—Ç–∞ (%)']) else round(row['–¢–µ–º–ø –ø—Ä–∏—Ä–æ—Å—Ç–∞ (%)'], 2)
        ])

    output = BytesIO()
    wb.save(output)
    return output.getvalue()

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã
def main():
    df = upload_interface()
    if not df.empty:
        filtered = filter_by_date(df)
        if not filtered.empty:
            show_kpis(filtered)
            plot_trend(filtered)
            st.subheader("üì§ –°–∫–∞—á–∞—Ç—å Excel-–æ—Ç—á—ë—Ç")
            excel_data = generate_excel(filtered)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å Excel-—Ñ–∞–π–ª",
                data=excel_data,
                file_name="sales_report.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

if __name__ == "__main__":
    main()